<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE rfc SYSTEM "">

<rfc
  version="3"
  category="std"
  docName="draft-ietf-core-coral-03"
  ipr="trust200902"
  submissionType="IETF"
  sortRefs="true"
  symRefs="true"
  tocInclude="true"
  tocDepth="3"
  xml:lang="en"
  xmlns:xi="http://www.w3.org/2001/XInclude">

  <front>

    <title abbrev="Constrained RESTful Application Language">
      The Constrained RESTful Application Language (CoRAL)
    </title>

    <author initials="K." surname="Hartke" fullname="Klaus Hartke">
      <organization>Ericsson</organization>
      <address>
        <postal>
          <street>Torshamnsgatan 23</street>
          <city>Stockholm</city>
          <code>16483</code>
          <country>Sweden</country>
        </postal>
        <email>klaus.hartke@ericsson.com</email>
      </address>
    </author>

    <date/>

    <workgroup>CoRE Working Group</workgroup>

    <abstract>

      <t>
        The Constrained RESTful Application Language (CoRAL) defines a data
        model and interaction model as well as two specialized serialization
        formats for the description of typed connections between resources on
        the Web ("links"), possible operations on such resources ("forms"), and
        simple resource metadata.
      </t>

    </abstract>

    <note removeInRFC="true">

      <name>Note to Readers</name>

      <t>
        The issues list for this Internet-Draft can be found at
        &lt;<eref target="https://github.com/core-wg/coral/labels/coral"/>&gt;.
      </t>

      <t>
        Companion material for this Internet-Draft can be found at
        &lt;<eref target="https://github.com/core-wg/coral"/>&gt;.
      </t>

    </note>

  </front>

  <middle>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="introduction">

      <name>Introduction</name>

      <t>
        The Constrained RESTful Application Language (CoRAL) is a language for
        the description of typed connections between resources on the Web
        ("links"), possible operations on such resources ("forms"), and
        simple resource metadata.
      </t>

      <t>
        CoRAL is intended for driving automated software agents that navigate a
        Web application based on a standardized vocabulary of link relation
        types and operation types.

        It is designed to be used in conjunction with a Web transfer protocol,
        such as the <xref target="RFC7230">Hypertext Transfer Protocol
        (HTTP)</xref> or the <xref target="RFC7252">Constrained Application
        Protocol (CoAP)</xref>.
      </t>

      <t>
        This document defines the CoRAL data model and interaction model as well
        as two specialized CoRAL serialization formats.
      </t>

      <section>

        <name>Data and Interaction Model</name>

        <t>
          The data model derives from the Web Linking model of <xref
          target="RFC8288">RFC 8288</xref> and consists primarily of two
          elements: "links" that describe the relationship between two resources
          and the type of that relationship; and "forms" that describe a
          possible operation on a resource and the type of that operation.
        </t>

        <t>
          The data model can additionally make simple statements about resources
          in a way similar to the <xref
          target="W3C.REC-rdf11-concepts-20140225">Resource Description
          Framework (RDF)</xref>.

          In contrast to RDF, however, the focus of CoRAL is not on the
          description of a graph of resources, but on the discovery of possible
          future application states.
        </t>

        <t>
          The interaction model derives from he processing model of <xref
          target="W3C.REC-html52-20171214">HTML</xref> and specifies how an
          automated software agent can change the application state by
          navigating between resources following links and performing operations
          on resources submitting forms.
        </t>

      </section>

      <section>

        <name>Serialization Formats</name>

        <t>
          The primary serialization format is a compact, binary encoding of
          links and forms in <xref target="I-D.ietf-cbor-7049bis">Concise Binary
          Object Representation (CBOR)</xref>.

          This format is intended for <xref target="RFC7228">environments with
          constraints on power, memory, and processing resources</xref> and
          shares many similarities with <xref target="RFC7252">the message of
          CoAP format</xref>:

          Small numeric identifiers are used in place of verbose strings for
          link relation types and operation types, and <xref
          target="RFC3986">Uniform Resource Identifiers (URIs)</xref> are
          pre-parsed into (what CoAP considers to be) their components, which
          considerably simplifies URI processing for constrained nodes that
          already have a CoAP implementation.

          As a result, link serializations in CoRAL are often much more compact
          and easier to process than equivalent serializations in <xref
          target="RFC6690">CoRE Link Format</xref>.
        </t>

        <t>
          The secondary serialization format is a lightweight, textual encoding
          of links and forms that is intended to be easy to read and to write
          for humans.

          The format is loosely inspired by the syntax of <xref
          target="W3C.REC-turtle-20140225">Turtle</xref> and is mainly intended
          for giving examples in documentations and specifications with precise
          semantics. </t>

      </section>

      <section>

        <name>Notational Conventions</name>

        <t>
          The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
          "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
          "OPTIONAL" in this document are to be interpreted as described in
          <xref target="RFC2119">BCP 14</xref> <xref target="RFC8174"/> when,
          and only when, they appear in all capitals, as shown here.
        </t>

        <t>
          Terms defined in this document appear in <em>cursive</em> where they
          are introduced.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="model">

      <name>Data and Interaction Model</name>

      <t>
        The Constrained RESTful Application Language (CoRAL) is designed for
        building <xref target="W3C.REC-webarch-20041215">Web-based
        applications</xref> in which automated software agents navigate between
        resources by following links and perform operations on resources by
        submitting forms.
      </t>

      <section>

        <name>Browsing Context</name>

        <t>
          Borrowing from <xref target="W3C.REC-html52-20171214">HTML 5</xref>,
          each such agent maintains a <em>browsing context</em> in which the
          representations of Web resources are processed. (In HTML, the browsing
          context typically corresponds to a tab or window in a Web browser.)
        </t>

        <t>
          At any time, one representation in a browsing context is designated
          the <em>active</em> representation.
        </t>

      </section>

      <section>

        <name>Documents</name>

        <t>
          A resource representation in one of the CoRAL serialization formats is
          called a CoRAL <em>document</em>.

          The URI that was used to retrieve such a document is called the
          document's <em>retrieval context</em>.

          That URI is also considered the base URI for relative URI references
          in the document.
        </t>

        <t>
          A CoRAL document consists of a list of zero or more links and forms,
          collectively called <em>elements</em>.

          CoRAL serialization formats may define additional types of elements
          for efficiency or convenience, such as an embedded base URI that takes
          precedence over the document's base URI.
        </t>

      </section>

      <section>

        <name>Links</name>

        <t>
          A <em>link</em> describes a relationship between two resources on the
          Web.

          As in <xref target="RFC8288">RFC 8288</xref>, a link in CoRAL has
              a <em>link context</em>,
              a <em>link relation type</em>, and
              a <em>link target</em>.

          However, a link in CoRAL does not have target attributes; instead, a
          link may have a list of zero or more nested elements. These enable
          both the description of resource metadata and the chaining of links
          which is done in RFC 8288 by setting the anchor of one link to the
          target of another.
        </t>

        <ul empty="true">
          <li>
            <t>
              A link can be viewed as a statement of the form "{link context}
              has a {link relation type} resource at {link target}" where the
              link target may be further described by nested elements.
            </t>
          </li>
        </ul>

        <t>
          A link relation type identifies the semantics of a link.

          In HTML and RFC 8288, link relation types are typically denoted by an
          IANA-registered name, such as <tt>stylesheet</tt> or <tt>type</tt>. In CoRAL, all
          link relation types are denoted by an <xref
          target="RFC3987">Internationalized Resource Identifier (IRI)</xref>,
          such as &lt;http://www.iana.org/assignments/relation/stylesheet&gt; or
          &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;.

          This allows for the decentralized creation of new link relation types
          without the risk of collisions when from different organizations or
          domains of knowledge. IRIs can also lead to documentation, schema, and
          other information about a link relation type.

          In CoRAL documents, these IRIs are only used as identity tokens,
          though, and are compared with Simple String Comparison as specified in
          <xref target="RFC3987" section="5.3.1">RFC 3987</xref>.
        </t>

        <t>
          Link contexts and link targets can both be either a URI, a literal
          value, or an anonymous resource.

          If the link target is a URI and the URI scheme indicates a Web
          transfer protocol like HTTP or CoAP, an agent can dereference the URI
          and navigate the browsing context to its target resource; this is
          called <em>following the link</em>.

          Literal values are distinct and distinguishable from URIs and directly
          identify data by means of a literal representation.
          A literal value can be either
              a Boolean value,
              an integer number,
              a floating-point number,
              a date/time instant,
              a byte string, or
              a text string.

          An anonymous resource is a resource that is neither identified by a
          URI nor a literal representation.
        </t>

        <t>
          A link can occur as a top-level element in a document or as a nested
          element within a link. When a link occurs as a top-level element, the
          link context implicitly is the document's retrieval context. When a
          link occurs nested within a link, the link context of the nested link
          is the link target of the enclosing link.
        </t>

        <t>
          There are no restrictions on the cardinality of links; there can be
          multiple links to and from a particular target, and multiple links of
          the same or different types between a given link context and target.

          However, the nesting nature of the data model constrains the
          description of resource relations to a tree: Relations between linked
          resources can only be described by further nesting links.
        </t>

      </section>

      <section>

        <name>Forms</name>

        <t>
          A <em>form</em> provides instructions to an agent for performing an
          operation on a resource on the Web.

          A form has
              a <em>form context</em>,
              an <em>operation type</em>,
              a <em>request method</em>, and
              a <em>submission target</em>.

          Additionally, a form may be accompanied by a list of zero or more
          <em>form fields</em>.
        </t>

        <ul empty="true">
          <li>
            <t>
              A form can be viewed as an instruction of the form "To perform an
              {operation type} operation on {form context}, make a {request
              method} request to {submission target}" where the request may be
              further described by form fields.
            </t>
          </li>
        </ul>

        <t>
          An operation type identifies the semantics of the operation.

          Operation types are denoted (like link relation types) by an IRI.
        </t>

        <t>
          Form contexts and submission targets are both denoted by a URI.

          The form context is the resource on which the operation is ultimately
          performed.

          To perform the operation, an agent needs to construct a request with
          the specified method as the request method and the specified
          submission target as the request URI. Usually, the submission target
          is the same resource as the form context, but may be a different
          resource.

          Constructing and sending the request is called <em>submitting the
          form</em>.
        </t>

        <t>
          A form can occur as a top-level element in a document or as a nested
          element within a link. When a form occurs as a top-level element, the
          form context implicitly is the document's retrieval context. When a
          form occurs nested within a link, the form context is the link target
          of the enclosing link.
        </t>

      </section>

      <section>

        <name>Form Fields</name>

        <t>
          Form fields can be used to provide more detailed instructions to
          agents for constructing the request when submitting a form.

          For example, a form field could instruct an agent to include a certain
          payload or header field in the request.

          A payload could for instance be described by form fields providing
          acceptable media types, a reference to schema information, or a number
          of individual data items that the agents needs to supply.

          Form fields can be specific to the Web transfer protocol that is used
          for submitting the form.
        </t>

        <t>
          A form field is a pair of
              a <em>form field type</em> and
              a <em>form field value</em>.

          Additionally, a form field may have a list of zero or more nested
          elements that further describe the form field value.
        </t>

        <t>
          A form field type identifies the semantics of the form field.

          Form field types are denoted (like link relation types and operation
          types) by an IRI.
        </t>

        <t>
          Form field values can be either
              a URI,
              a Boolean value,
              an integer number,
              a floating-point number,
              a date/time instant,
              a byte string,
              a text string, or
              null.

          A null indicates the intentional absence of any form field value.
        </t>

      </section>

      <section>

        <name>Navigation</name>

        <t>
          An agent begins the interaction with an application by performing a
          GET request on an <em>entry point URI</em>. The entry point URI is the
          only URI that the agent is expected to know beforehand. From then on,
          the agent is expected to make all requests by following links and
          submitting forms that are provided in the responses resulting from the
          requests. The entry point URI could be obtained through some discovery
          process or manual configuration.
        </t>

        <t>
          If dereferencing the entry point URI yields a CoRAL document (or any
          other representation that implements the CoRAL data and interaction
          model), the agent makes this document the active representation in the
          browsing context and proceeds as follows:
        </t>

        <ol>
          <li>
            <t>
              The first step for the agent is to decide what to do next, i.e.,
              which type of link to follow or form to submit, based on the link
              relation types and operation types it understands.
            </t>
            <t>
              An agent may follow a link without understanding the link relation
              type, e.g., for the sake of pre-fetching or building a search
              index. However, an agent <bcp14>MUST NOT</bcp14> submit a form without
              understanding the operation type.
            </t>
          </li>
          <li>
            <t>
              The agent then finds the link(s) or form(s) with the respective
              type in the active representation.

              This may yield one or more candidates, from which the agent will
              have to select the most appropriate one.

              The set of candidates can be empty, for example, when an
              application state transition is not supported or not allowed.
            </t>
          </li>
          <li>
            <t>
              The agent selects one of the candidates based on the metadata
              associated them (in the form of form fields and nested elements)
              and their order of appearance in the document.

              Examples for relevant metadata could include the indication of a
              media type for the target resource representation, the URI
              scheme of a target resource, or the request method of an
              operation.
            </t>
          </li>
          <li>
            <t>
              The agent obtains the <em>request URI</em> from the link target or
              submission target.

              Link targets and submission targets can be denoted by relative URI
              references, which need to be resolved against a base URI to obtain
              the request URI.

              Fragment identifiers are not part of the request URI and <bcp14>MUST</bcp14> be
              separated from the rest of the URI prior to the next step.
            </t>
          </li>
          <li>
            <t>
              The agent constructs a new request with the request URI.

              If the agent is following a link, then the request method <bcp14>MUST</bcp14> be
              GET.

              If the agent is submitting a form, then the request method <bcp14>MUST</bcp14> be
              the one supplied by the form.

              An IRI may need to be converted to a URI (see <xref
              target="RFC3987" section="3.1">RFC 3987</xref>) for protocols that
              do not support IRIs.
            </t>
            <t>
              The agent <bcp14>SHOULD</bcp14> set HTTP header fields and CoAP request options
              according to the metadata (e.g., set the HTTP Accept header field
              or the CoAP Accept option when a media type for the target
              resource is provided).

              Depending on the operation type of a form, the agent may also have
              to include a request payload that matches the specifications of
              some form fields.
            </t>
          </li>
          <li>
            <t>
              The agent sends the request and receives the response.
            </t>
          </li>
          <li>
            <t>
              If a fragment identifier was separated from the request URI, the
              agent dereferences the fragment indicated by the fragment
              identifier within the received representation according to the
              semantics of its media type.
            </t>
          </li>
          <li>
            <t>
              The agent updates the browsing context by making the (dereferenced
              fragment of the) received representation the active
              representation.
            </t>
          </li>
          <li>
            <t>
              Finally, the agent processes the representation according to the
              semantics of its media type.

              If the representation is a CoRAL document (or any other
              representation that implements the CoRAL data and interaction
              model), the agent again has the choice of what to do next. Go to
              step 1.
            </t>
          </li>
        </ol>

      </section>

      <section>

        <name>History Traversal</name>

        <t>
          A browsing context has a <em>session history</em>, which lists the
          resource representations that the agent has processed, is processing,
          or will process.
        </t>

        <t>
          A session history consists of session history entries.

          The number of session history entries may be limited and dependent on
          the agent. An agent with severe constraints on memory size might only
          have enough memory for the most recent entry.
        </t>

        <t>
          An entry in the session history consists of a resource representation
          and the representation's retrieval context. New entries are added to
          the session history as the agent navigates from resource to resource,
          discarding entries that are no longer used.
        </t>

        <t>
          An agent can decide to navigate a browsing context (in addition to
          following links and submitting forms) by <em>traversing the session
          history</em>.

          For example, when an agent receives a response with a representation
          that does not contain any further links or forms, it can navigate back
          to a resource representation it has visited earlier and make that the
          active representation.
        </t>

        <t>
          Traversing the history <bcp14>SHOULD</bcp14> take advantage of caches to avoid new
          requests.

          An agent may reissue a safe request (e.g., a GET) when it does
          not have a fresh representation in its cache.

          An agent <bcp14>MUST NOT</bcp14> reissue an unsafe request (e.g., a PUT or
          POST) unless it actually intends to perform that operation again.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="binary">

      <name>Binary Format</name>

      <t>
        This section defines the encoding of documents in the CoRAL binary
        format.
      </t>

      <t>
        A document in the binary format is encoded in <xref
        target="I-D.ietf-cbor-7049bis">Concise Binary Object Representation
        (CBOR)</xref>.

        The encoding <bcp14>MUST</bcp14> satisfy the Core Deterministic Encoding Requirements
        specified in <xref target="I-D.ietf-cbor-7049bis"
        section="4.2.1">RFC 7049bis</xref>.
      </t>

      <t>
        The CBOR structure of a document is presented in the <xref
        target="RFC8610">Concise Data Definition Language (CDDL)</xref>.

        All CDDL rules not defined in this document are defined in
        <xref target="RFC8610" section="D">RFC 8610</xref>.
      </t>

      <t>
        The media type of documents in the binary format is
        <tt>application/coral+cbor</tt>.
      </t>

      <section>

        <name>Data Structure</name>

        <t>
          The data structure of a document in the binary format is made up of
          three kinds of elements:
              links,
              forms, and
              (as an extension to the CoRAL data model) directives.

          Directives provide a way to encode URI references with a common base
          more efficiently.
        </t>

        <section anchor="binary-body">

          <name>Documents</name>

          <t>
            A document in the binary format is encoded as a CBOR array that
            contains zero or more elements.

            An element is either
                a link,
                a form, or
                a directive.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">document = [*element]</sourcecode></li>
            <li><sourcecode type="cddl" markers="false">element = link / form / directive</sourcecode></li>
          </ul>

          <t>
            The elements are processed in the order they appear in the document.
            Document processors need to maintain an <em>environment</em> while
            iterating an array of elements.

            The environment consists of two variables:
                the <em>current context</em> and
                the <em>current base</em>.

            Both the current context and the current base are initially set to
            the document's retrieval context.
          </t>

        </section>

        <section>

          <name>Directives</name>

          <t>
            Directives provide the ability to manipulate the environment while
            processing elements.
          </t>

          <t>
            There is a single type of directives available:
                the Base directive.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">directive = base-directive</sourcecode></li>
          </ul>

          <t>
            It is an error if a document processor encounters any other type of
            directive.
          </t>

          <section>

            <name>Base Directives</name>

            <t>
              A Base directive is encoded as a CBOR array that contains the
              unsigned integer 1 and a base URI.
            </t>

            <ul empty="true">
              <li><sourcecode type="cddl" markers="false">base-directive = [1, baseURI]</sourcecode></li>
            </ul>

            <t>
              The base URI is denoted by a <xref
              target="I-D.ietf-core-href">Constrained Resource Identifier (CoRI)
              reference</xref>.

              The CoRI reference <bcp14>MUST</bcp14> be resolved against the current context
              (not the current base).
            </t>

            <ul empty="true">
              <li><sourcecode type="cddl" markers="false">baseURI = CoRI</sourcecode></li>
              <li><sourcecode type="cddl" markers="false">CoRI = &lt;Defined in Section XX of RFC XXXX&gt;</sourcecode></li>
            </ul>

            <t>
              The directive is processed by resolving the CoRI reference against
              the current context and assigning the result to the current base.
            </t>

          </section>

        </section>

        <section>

          <name>IRIs</name>

          <t>
            IRIs in links and forms are encoded as CoRI references.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">IRI = CoRI</sourcecode></li>
          </ul>

          <t>
            A CoRI reference is processed by resolving it to an IRI as specified
            in Section XX of <xref target="I-D.ietf-core-href">RFC XXXX</xref>
            using the current base.
          </t>

        </section>

        <section>

          <name>Links</name>

          <t>
            A link is encoded as a CBOR array that contains the unsigned integer
            2, the link relation type, the link target, and, optionally, an array
            of zero or more nested elements.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">link = [2, relation-type, link-target, ?[*element]]</sourcecode></li>
          </ul>

          <t>
            The link relation type is encoded as a text string that conforms to
            the syntax of an <xref target="RFC3987">IRI</xref>.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">relation-type = text</sourcecode></li>
          </ul>

          <t>
            The link target is either an IRI, a literal value, or null.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">link-target = IRI / literal / null</sourcecode></li>
            <li><sourcecode type="cddl" markers="false">literal = bool / int / float / time / bytes / text</sourcecode></li>
          </ul>

          <t>
            The nested elements, if any, <bcp14>MUST</bcp14> be processed in a fresh
            environment. Both the current context and current base in this
            environment are initially set to the link target of the enclosing
            link.
          </t>

        </section>

        <section>

          <name>Forms</name>

          <t>
            A form is encoded as a CBOR array that contains the unsigned integer
            3, the operation type, the submission target, and, optionally, an
            array of zero or more form fields.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">form = [3, operation-type, submission-target, ?[*form-field]]</sourcecode></li>
          </ul>

          <t>
            The operation type is encoded as a text string that conforms to the
            syntax of an <xref target="RFC3987">IRI</xref>.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">operation-type = text</sourcecode></li>
          </ul>

          <t>
            The submission target is an IRI.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">submission-target = IRI</sourcecode></li>
          </ul>

          <t>
            The request method is either implied by the operation type or
            encoded as a form field. If both are given, the form field takes
            precedence over the operation type. Either way, the method <bcp14>MUST</bcp14> be
            applicable to the Web transfer protocol identified by the scheme of
            the submission target.
          </t>

          <t>
            <!-- FIXME -->
            The form fields, if any, <bcp14>MUST</bcp14> be processed in a fresh environment.
            Both the current context and the current base in this environment
            are initially set to the submission target of the enclosing form.
          </t>

        </section>

        <section>

          <name>Form Fields</name>

          <t>
            A form field is encoded as a CBOR sequence that consists of a form
            field type, a form field value, and, optionally, an array of zero or
            more nested elements.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">form-field = (form-field-type, form-field-value, ?[*element])</sourcecode></li>
          </ul>

          <t>
            The form field type is encoded as a text string that conforms to the
            syntax of an <xref target="RFC3987">IRI</xref>.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">form-field-type = text</sourcecode></li>
          </ul>

          <t>
            The form field value is either an IRI, a literal value, or null.
          </t>

          <ul empty="true">
            <li><sourcecode type="cddl" markers="false">form-field-value = IRI / literal / null</sourcecode></li>
          </ul>

          <t>
            The nested elements, if any, <bcp14>MUST</bcp14> be processed in a fresh
            environment. Both the current context and current base in this
            environment are initially set to the form field value of the enclosing
            form field.
          </t>

        </section>

      </section>

      <section anchor="dictionaries">

        <name>Dictionary Compression</name>

        <t>
          A document in the binary format <bcp14>MAY</bcp14> reference values from an external
          dictionary. This helps to reduce representation size and processing cost.

          Dictionary references can be used in place of
              link relation types,
              link targets,
              operation types,
              submission targets,
              form field types, and
              form field values.
        </t>

        <section>

          <name>Dictionary References</name>

          <t>
            A dictionary reference is encoded as an unsigned integer. Where a
            dictionary reference cannot be expressed unambiguously, the unsigned
            integer is tagged with CBOR tag TBD6, as follows:
          </t>

          <ul empty="true">
            <li>
<sourcecode type="cddl" markers="false">
relation-type /= uint
link-target /= #6.TBD6(uint)
operation-type /= uint
submission-target /= #6.TBD6(uint)
form-field-type /= uint
form-field-value /= #6.TBD6(uint)
</sourcecode>
            </li>
          </ul>

          <t>
            A dictionary reference <bcp14>MUST NOT</bcp14> refer to a dictionary value that
            would otherwise not be allowed syntactically in that position. For
            example, a dictionary reference in the position of a link relation
            type cannot refer to a Boolean value.
          </t>

        </section>

        <section>

          <name>Media Type Parameter</name>

          <t>
            The <tt>application/coral+cbor</tt> media type for documents in the binary
            format is defined to have a <tt>dictionary</tt> parameter that specifies
            the dictionary in use. The dictionary is identified by a <xref
            target="RFC3986">URI</xref>.

            For example, a CoRAL document that uses the dictionary identified by
            the URI &lt;http://example.com/dictionary&gt; would have the following
            content type:
          </t>

          <ul empty="true">
            <li>
<sourcecode markers="false">
application/coral+cbor;dictionary="http://example.com/dictionary"
</sourcecode>
            </li>
          </ul>

          <t>
            The URI serves only as an identifier; it does not necessarily have
            to be dereferencable (or even use a dereferencable URI scheme). It
            is permissible, though, to use a dereferencable URI and to serve a
            representation that provides information about the dictionary in a
            machine- or human-readable way. (The representation format and
            security considerations of such a representation are outside the
            scope of this document.)
          </t>

          <t>
            For simplicity, a CoRAL document can reference values only from one
            dictionary; the value of the <tt>dictionary</tt> parameter <bcp14>MUST</bcp14> be a single
            URI.
          </t>

          <t>
            The <tt>dictionary</tt> parameter is <bcp14>OPTIONAL</bcp14>. If it is absent, the default
            dictionary specified in <xref target="default-dictionary"/> of this
            document is assumed.
          </t>

          <t>
            Once a dictionary has made an assignment, the assignment <bcp14>MUST NOT</bcp14> be
            changed or removed. A dictionary, however, may contain additional
            information about an assignment, which may change over time.
          </t>

          <t>
            In <xref target="RFC7252">CoAP</xref>, media types (including
            specific values for their parameters, plus an optional content
            coding) are encoded as an unsigned integer called the "content
            format" of a representation.

            For use with CoAP, each new CoRAL dictionary therefore needs to have
            a new content format registered in the <xref target="CORE-PARAMETERS">CoAP Content Formats
            Registry</xref>.
          </t>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="textual">

      <name>Textual Format</name>

      <t>
        This section defines the syntax of documents in the CoRAL textual format
        using two grammars:

        The lexical grammar defines how Unicode characters are combined to form
        line terminators, white space, comments, and tokens.

        The syntactic grammar defines how tokens are combined to form documents.

        Both grammars are presented in <xref target="RFC5234">Augmented
        Backus-Naur Form (ABNF)</xref>.
      </t>

      <t>
        A document in the textual format is a Unicode string in a Unicode
        encoding form <xref target="UNICODE"/>.

        The media type for such documents is <tt>text/coral</tt>. The
        <tt>charset</tt> parameter of textual media types <xref target="RFC6657"/> is
        not used; instead, charset information is transported inside the
        document in the form of an <bcp14>OPTIONAL</bcp14> Byte Order Mark (BOM).

        The use of the <xref target="RFC3629">UTF-8 encoding scheme</xref>
        without a BOM is <bcp14>RECOMMENDED</bcp14>.
      </t>

      <section>

        <name>Lexical Structure</name>

        <t>
          The lexical structure of a document in the textual format is made up
          of four basic elements:
              line terminators,
              white space,
              comments, and
              tokens.

          Of these, only tokens are significant in the syntactic grammar.

          There are three kinds of tokens:
              identifier tokens,
              literal tokens, and
              punctuator tokens.
        </t>

        <ul empty="true">
          <li>
<sourcecode type="abnf" markers="false">
token = identifier / IRIref / boolean / integer / float
      / datetime / bytes / text / null / punctuator
</sourcecode></li>
        </ul>

        <t>
          When several lexical grammar rules match a sequence of characters in a
          document, the longest match takes priority.
        </t>

        <section>

          <name>Line Terminators</name>

          <t>
            Line terminators divide text into lines.

            A line terminator is any Unicode character with Line_Break class
                BK,
                CR,
                LF, or
                NL.

            However, any CR character that immediately precedes a LF character
            is ignored. (This affects only the numbering of lines in error
            messages.)
          </t>

        </section>

        <section>

          <name>White Space</name>

          <t>
            White space is a sequence of one or more white space characters.

            A white space character is any Unicode character with the
            White_Space property.
          </t>

        </section>

        <section>

          <name>Comments</name>

          <t>
            Comments are sequences of characters that are ignored when parsing
            text into tokens.

            Single-line comments begin with the characters <tt>//</tt> and extend to
            the end of the line.

            Delimited comments begin with the characters <tt>/*</tt> and end with the
            characters <tt>*/</tt>. Delimited comments can occupy a portion of a line,
            a single line, or multiple lines.
          </t>

          <t>
            Comments do not nest. The character sequences <tt>/*</tt> and <tt>*/</tt> have no
            special meaning within a single-line comment; the character
            sequences <tt>//</tt> and <tt>/*</tt> have no special meaning within a delimited
            comment.
          </t>

        </section>

        <section>

          <name>Identifiers</name>

          <t>
            An identifier token is a user-defined symbolic name. The syntax for
            identifiers corresponds to the Default Identifier Syntax in <xref
            target="UAX31">Unicode Standard Annex #31</xref> using the following
            profile:
          </t>

          <ul empty="true">
            <li>
<sourcecode type="abnf" markers="false">
identifier = START *CONTINUE *(MEDIAL 1*CONTINUE)
START = &lt;Any character with the XID_Start property&gt;
CONTINUE = &lt;Any character with the XID_Continue property&gt;
MEDIAL = &lt;Any character from Table XX&gt;
</sourcecode>
            </li>
          </ul>

          <table anchor="medial" align="center">
            <name>Medial Characters</name>
            <thead>
              <tr>
                <th align="left">Code Point</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">U+002D HYPHEN-MINUS</td>
              </tr>
              <tr>
                <td align="left">U+002E FULL STOP</td>
              </tr>
              <tr>
                <td align="left">U+007E TILDE</td>
              </tr>
              <tr>
                <td align="left">U+058A ARMENIAN HYPHEN</td>
              </tr>
              <tr>
                <td align="left">U+0F0B TIBETAN MARK INTERSYLLABIC TSHEG</td>
              </tr>
              <tr>
                <td align="left">U+2010 HYPHEN</td>
              </tr>
              <tr>
                <td align="left">U+2027 HYPHENATION POINT</td>
              </tr>
              <tr>
                <td align="left">U+30A0 KATAKANA-HIRAGANA DOUBLE HYPHEN</td>
              </tr>
              <tr>
                <td align="left">U+30FB KATAKANA MIDDLE DOT</td>
              </tr>
            </tbody>
          </table>

          <t>
            All identifiers <bcp14>MUST</bcp14> be converted into Unicode Normalization Form C
            (NFC), which is defined in <xref target="UAX15">Unicode Standard
            Annex #15</xref>.

            Comparison of identifiers is based on NFC and case-sensitive (unless
            otherwise noted).
          </t>

        </section>

        <section>

          <name>Literals</name>

          <t>
            A literal token is a textual representation of a value.
          </t>

          <section>

            <name>IRI Reference Literals</name>

            <t>
              IRI reference tokens denote references to resources on the Web.
            </t>

            <t>
              An IRI reference literal consists of a Unicode string that
              conforms to the syntax defined in <xref target="RFC3987">RFC
              3987</xref>.

              An IRI reference is either an IRI or a relative reference.

              IRI references are enclosed in angle brackets (<tt>&lt;</tt> and <tt>&gt;</tt>).
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">IRIref = "&lt;" IRI-reference "&gt;"</sourcecode></li>
              <li><sourcecode type="abnf" markers="false">IRI-reference = &lt;Defined in Section 2.2 of RFC 3987&gt;</sourcecode></li>
            </ul>

          </section>

          <section>

            <name>Boolean Literals</name>

            <t>
              The case-insensitive tokens <tt>true</tt> and <tt>false</tt> denote the Boolean
              values true and false, respectively.
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">boolean = "true" / "false"</sourcecode></li>
            </ul>

          </section>

          <section>

            <name>Integer Literals</name>

            <t>
              Integer literal tokens denote an integer value of unspecified
              precision.

              By default, integer literals are expressed in decimal, but they
              can also be specified in an alternate base using a prefix: Binary
              literals begin with <tt>0b</tt>, octal literals begin with <tt>0o</tt>, and
              hexadecimal literals begin with <tt>0x</tt>.
            </t>

            <t>
              Decimal literals contain the digits <tt>0</tt> through <tt>9</tt>. Binary
              literals contain <tt>0</tt> and <tt>1</tt>, octal literals contain <tt>0</tt> through
              <tt>7</tt>, and hexadecimal literals contain <tt>0</tt> through <tt>9</tt> as well as
              <tt>A</tt> through <tt>F</tt> in upper- or lowercase.
            </t>

            <t>
              Negative integers are expressed by prepending a minus sign (<tt>-</tt>).
            </t>

            <ul empty="true">
              <li>
<sourcecode type="abnf" markers="false">
integer = ["+" / "-"] (decimal / binary / octal / hexadecimal)
decimal = 1*DIGIT
binary = %x30 (%x42 / %x62) 1*BINDIG
octal = %x30 (%x4F / %x6F) 1*OCTDIG
hexadecimal = %x30 (%x58 / %x78) 1*HEXDIG
DIGIT = %x30-39
BINDIG = %x30-31
OCTDIG = %x30-37
HEXDIG = %x30-39 / %x41-46 / %x61-66
</sourcecode>
              </li>
            </ul>

          </section>

          <section>

            <name>Floating-point Literals</name>

            <t>
              Floating-point literal tokens denote a floating-point number of
              unspecified precision.
            </t>

            <t>
              Floating-point literals consist of a sequence of decimal digits
              followed by a fraction, an exponent, or both.

              The fraction consists of a decimal point (<tt>.</tt>) followed by a
              sequence of decimal digits.

              The exponent consists of the letter <tt>e</tt> in upper- or lowercase,
              followed by an optional sign and a sequence of decimal digits that
              indicate a power of 10 by which the value preceding the <tt>e</tt> is
              multiplied.
            </t>

            <t>
              Negative floating-point values are expressed by prepending a minus
              sign (<tt>-</tt>).
            </t>

            <ul empty="true">
              <li>
<sourcecode type="abnf" markers="false">
float = ["+" / "-"] 1*DIGIT [fraction] [exponent]
fraction = "." 1*DIGIT
exponent = (%x45 / %x65) ["+" / "-"] 1*DIGIT
</sourcecode>
              </li>
            </ul>

            <t>
              A floating-point literal can additionally denote either
                  the special "Not-a-Number" (NaN) value,
                  positive infinity, or
                  negative infinity.

              The NaN value is produced by the case-insensitive token <tt>NaN</tt>.

              The two infinite values are produced by the case-insensitive
              tokens <tt>+Infinity</tt> (or simply <tt>Infinity</tt>) and <tt>-Infinity</tt>.
            </t>

            <ul empty="true">
              <li>
<sourcecode type="abnf" markers="false">
float =/ "NaN"
       / ["+" / "-"] "Infinity"
</sourcecode>
              </li>
            </ul>

          </section>

          <section>

            <name>Date/Time Literals</name>

            <t>
              Date/time literal tokens denote an instant in time.
            </t>

            <t>
              A date/time literal consists of the prefix <tt>dt</tt> and a sequence of
              Unicode characters in <xref target="RFC3339">Internet Date/Time
              Format</xref>, enclosed in single quotes.
            </t>

            <ul empty="true">
              <li>
<sourcecode type="abnf" markers="false">
datetime = %x64.74 SQUOTE date-time SQUOTE
date-time = &lt;Defined in Section 5.6 of RFC 3339&gt;
SQUOTE = %x27
</sourcecode>
              </li>
            </ul>

          </section>

          <section>

            <name>Byte String Literals</name>

            <t>
              Byte string literal tokens denote an ordered sequence of bytes.
            </t>

            <t>
              A byte string literal consists of a prefix and zero or more bytes
              encoded in <xref target="RFC4648">Base16, Base32, or
              Base64</xref>, enclosed in single quotes.

              Byte string literals encoded in Base16 begin with <tt>h</tt> or <tt>b16</tt>,
              byte string literals encoded in Base32 begin with <tt>b32</tt>, and
              byte string literals encoded in Base64 begin with <tt>b64</tt>.
            </t>

            <ul empty="true">
              <li>
<sourcecode type="abnf" markers="false">
bytes = base16 / base32 / base64
base16 = (%x68 / %x62.31.36) SQUOTE &lt;Base16 encoded data&gt; SQUOTE
base32 = %x62.33.32 SQUOTE &lt;Base32 encoded data&gt; SQUOTE
base64 = %x62.36.34 SQUOTE &lt;Base64 encoded data&gt; SQUOTE
</sourcecode>
              </li>
            </ul>

          </section>

          <section>

            <name>Text String Literals</name>

            <t>
              Text string literal tokens denote a Unicode string.
            </t>

            <t>
              A text string literal consists of zero or more Unicode characters
              enclosed in double quotes.

              It can include simple escape sequences (such as \t for the tab
              character) as well as hexadecimal and Unicode escape sequences.
            </t>

            <ul empty="true">
              <li>
<sourcecode type="abnf" markers="false">
text = DQUOTE *(char / %x5C escape) DQUOTE
char = &lt;Any character except DQUOTE, %x5C, and line terminators&gt;
escape = simple-escape / hexadecimal-escape / unicode-escape
simple-escape = %x30 / %x62 / %x74 / %x6E / %x76
simple-escape =/ %x66 / %x72 / %x22 / %x27 / %x5C
hexadecimal-escape = (%x78 / %x58) 2HEXDIG
unicode-escape = %x75 4HEXDIG / %x55 8HEXDIG
DQUOTE = %x22
</sourcecode>
              </li>
            </ul>

            <t>
              An escape sequence denotes a single Unicode code point.

              For hexadecimal and Unicode escape sequences, the code point is
              expressed by the hexadecimal number following the <tt>\x</tt>, <tt>\X</tt>,
              <tt>\u</tt>, or <tt>\U</tt> prefix.

              Simple escape sequences indicate the code points listed in <xref
              target="escape"/>.
            </t>

            <table anchor="escape" align="center">
              <name>Simple Escape Sequences</name>
              <thead>
                <tr>
                  <th align="center">Escape Sequence</th>
                  <th align="center">Code Point</th>
                  <th align="left">Character Name</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="center">\0</td>
                  <td align="center">U+0000</td>
                  <td align="left">Null</td>
                </tr>
                <tr>
                  <td align="center">\b</td>
                  <td align="center">U+0008</td>
                  <td align="left">Backspace</td>
                </tr>
                <tr>
                  <td align="center">\t</td>
                  <td align="center">U+0009</td>
                  <td align="left">Character Tabulation</td>
                </tr>
                <tr>
                  <td align="center">\n</td>
                  <td align="center">U+000A</td>
                  <td align="left">Line Feed</td>
                </tr>
                <tr>
                  <td align="center">\v</td>
                  <td align="center">U+000B</td>
                  <td align="left">Line Tabulation</td>
                </tr>
                <tr>
                  <td align="center">\f</td>
                  <td align="center">U+000C</td>
                  <td align="left">Form Feed</td>
                </tr>
                <tr>
                  <td align="center">\r</td>
                  <td align="center">U+000D</td>
                  <td align="left">Carriage Return</td>
                </tr>
                <tr>
                  <td align="center">\"</td>
                  <td align="center">U+0022</td>
                  <td align="left">Quotation Mark</td>
                </tr>
                <tr>
                  <td align="center">\'</td>
                  <td align="center">U+0027</td>
                  <td align="left">Apostrophe</td>
                </tr>
                <tr>
                  <td align="center">\\</td>
                  <td align="center">U+005C</td>
                  <td align="left">Reverse Solidus</td>
                </tr>
              </tbody>
            </table>

          </section>

          <section>

            <name>Null Literal</name>

            <t>
              The case-insensitive tokens <tt>null</tt> and <tt>_</tt> denote the intentional
              absence of any value.
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">null = "null" / "_"</sourcecode></li>
            </ul>

          </section>

        </section>

        <section>

          <name>Punctuators</name>

          <t>
            Punctuator tokens are used for grouping and separating.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">punctuator = "#" / ":" / "=" / "@" / "[" / "]" / "{" / "}" / "-&gt;"</sourcecode></li>
          </ul>

        </section>

      </section>

      <section>

        <name>Syntactic Structure</name>

        <t>
          The syntactic structure of a document in the textual format is made up
          of three kinds of elements:
              links,
              forms, and
              (as an extension to the CoRAL data model) directives.

          Directives provide a way to make documents easier to read and write by
          setting a base for relative IRI references and introducing shorthands
          for IRIs.
        </t>

        <section>

          <name>Documents</name>

          <t>
            A document in the textual format consists of a sequence of zero or
            more elements.

            An element is either
                a link,
                a form, or
                a directive.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">document = *element</sourcecode></li>
            <li><sourcecode type="abnf" markers="false">element = link / form / directive</sourcecode></li>
          </ul>

          <t>
            The elements are processed in the order they appear in the document.
            Document processors need to maintain an <em>environment</em> while
            iterating a sequence of elements.

            The environment consists of three variables:
                the <em>current context</em>,
                the <em>current base</em>, and
                the <em>current mapping from identifiers to IRIs</em>.

            Both the current context and the current base are initially set to
            the document's retrieval context.

            The current mapping from identifiers to IRIs is initially empty.
          </t>

        </section>

        <section>

          <name>Directives</name>

          <t>
            Directives provide the ability to manipulate the environment while
            processing elements.
          </t>

          <t>
            All directives start with a number sign (<tt>#</tt>) followed by an
            identifier. The identifier is case-insensitive and restricted to
            Unicode characters in the Basic Latin block.
          </t>

          <t>
            The following two types of directives are available:
                the Base directive and
                the Using directive.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">directive = base-directive / using-directive</sourcecode></li>
          </ul>

          <t>
            It is an error if a document processor encounters any other type of
            directive.
          </t>

          <section>

            <name>Base Directives</name>

            <t>
              A Base directive consists of a number sign (<tt>#</tt>), followed by the
              case-insensitive token <tt>base</tt>, followed by a base IRI.
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">base-directive = "#" "base" baseIRI</sourcecode></li>
            </ul>

            <t>
              The base IRI is denoted by an IRI reference. The IRI reference
              <bcp14>MUST</bcp14> be resolved against the current context (not the current
              base).
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">baseIRI = IRIref</sourcecode></li>
            </ul>

            <t>
              The directive is processed by resolving the IRI reference against
              the current context and assigning the result to the current base.
            </t>

          </section>

          <section>

            <name>Using Directives</name>

            <t>
              A Using directive consists of a number sign (<tt>#</tt>), followed by the
              case-insensitive token <tt>using</tt>, optionally followed by an
              identifier and an equals sign (<tt>=</tt>), finally followed by an IRI.

              If the identifier is not specified, it is assumed to be the empty
              string.
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">using-directive = "#" "using" [identifier "="] IRIref</sourcecode></li>
            </ul>

            <t>
              The directive is processed by adding the specified identifier and
              IRI to the current mapping from identifiers to IRIs.

              It is an error if the identifier is already present in the mapping
              or if the IRI is not an IRI but a relative reference.
            </t>

          </section>

        </section>

        <section>

          <name>IRIs</name>

          <t>
            IRIs in links and forms can be either denoted by an IRI reference or
            looked up in a mapping from identifiers to IRIs.

            Lookups can be done in three ways: using
                a simple name,
                a qualified name, or
                a predefined name.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">IRI = IRIref / simple-name / qualified-name / predefined-name</sourcecode></li>
          </ul>

          <t>
            All IRI references and names are processed by resolving them to an
            IRI, as described in the following sub-sections.
          </t>

          <section>

            <name>IRI References</name>

            <t>
              An IRI reference is resolved to an IRI as specified in <xref
              target="RFC3987" section="6.5">RFC 3987</xref> with the current
              base as the base URI.
            </t>

          </section>

          <section>

           <name>Simple Names</name>

            <t>
              A simple name consists of an identifier.
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">simple-name = identifier</sourcecode></li>
            </ul>

            <t>
              A simple name is resolved to an IRI by looking up the empty string
              in the current mapping from identifiers to IRIs and appending the
              given identifier to the result.

              It is an error if the empty string is not present in the mapping.
            </t>

          </section>

          <section>

            <name>Qualified Names</name>

            <t>
              A qualified name consists of two identifiers separated by a colon
              (<tt>:</tt>).
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">qualified-name = identifier ":" identifier</sourcecode></li>
            </ul>

            <t>
              A qualified name is resolved to an IRI by looking up the
              identifier given on the left hand side in the current mapping from
              identifiers to IRIs. The identifier given on the right hand side
              is appended to the result.

              It is an error if the identifier on the left hand side is not
              present in the mapping.
            </t>

          </section>

          <section>

            <name>Predefined Names</name>

            <t>
              A predefined name consists of a commercial at sign (<tt>@</tt>) followed
              by an identifier. The identifier is case-insensitive and
              restricted to Unicode characters in the Basic Latin block.
            </t>

            <ul empty="true">
              <li><sourcecode type="abnf" markers="false">predefined-name = "@" identifier</sourcecode></li>
            </ul>

            <t>
              A predefined name is resolved to an IRI by looking up the
              identifier in <xref target="predefined-names"/>. It is an error if
              the identifier is not present in the table.
            </t>

            <table anchor="predefined-names" align="center">
              <name>Predefined Names</name>
              <thead>
                <tr>
                  <th align="left">Identifier</th>
                  <th align="left">IRI</th>
                </tr>
              </thead>
              <tbody>
                <!-- sorted alphabetically -->
                <tr>
                  <td align="left">direction</td>
                  <td align="left">&lt;http://coreapps.org/base#direction&gt;</td>
                </tr>
                <tr>
                  <td align="left">language</td>
                  <td align="left">&lt;http://coreapps.org/base#language&gt;</td>
                </tr>
              </tbody>
            </table>

          </section>

        </section>

        <section>

          <name>Links</name>

          <t>
            A link consists of the link relation type, followed by the link
            target, optionally followed by a sequence of zero or more nested
            elements enclosed in curly brackets (<tt>{</tt> and <tt>}</tt>).
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">link = relation-type link-target ["{" *element "}"]</sourcecode></li>
          </ul>

          <t>
            The link relation type is an IRI.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">relation-type = IRI</sourcecode></li>
          </ul>

          <t>
            The link target is either an IRI, a literal value, or null.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">link-target = IRI / literal / null</sourcecode></li>
            <li><sourcecode type="abnf" markers="false">literal = boolean / integer / float / datetime / bytes / text</sourcecode></li>
          </ul>

          <t>
            The nested elements, if any, <bcp14>MUST</bcp14> be processed in a fresh
            environment. Both the current context and current base in this
            environment are initially set to the link target of the enclosing
            link. The mapping from identifiers to IRIs is initially set to a
            copy of the mapping from identifiers to IRIs in the current
            environment.
          </t>

        </section>

        <section>

          <name>Forms</name>

          <t>
            A form consists of the operation type, followed by a <tt>-&gt;</tt> token
            and the submission target, optionally followed by a sequence of zero
            or more form fields enclosed in square brackets (<tt>[</tt> and <tt>]</tt>).
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">form = operation-type "-&gt;" submission-target ["[" *form-field "]"]</sourcecode></li>
          </ul>

          <t>
            The operation type is an IRI.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">operation-type = IRI</sourcecode></li>
          </ul>

          <t>
            The submission target is an IRI.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">submission-target = IRI</sourcecode></li>
          </ul>

          <t>
            The request method is either implied by the operation type or
            encoded as a form field. If both are given, the form field takes
            precedence over the operation type. Either way, the method <bcp14>MUST</bcp14> be
            applicable to the Web transfer protocol identified by the scheme of
            the submission target.
          </t>

          <t>
            The form fields, if any, <bcp14>MUST</bcp14> be processed in a fresh environment.
            Both the current context and the current base in this environment
            are initially set to the submission target of the enclosing form.
            The mapping from identifiers to IRIs is initially set to a copy of
            the mapping from identifiers to IRIs in the current environment.
          </t>

        </section>

        <section>

          <name>Form Fields</name>

          <t>
            A form field consists of a form field type, followed by a form field
            value, optionally followed by a sequence of zero or more nested
            elements enclosed in curly brackets (<tt>{</tt> and <tt>}</tt>).
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">form-field = form-field-type form-field-value ["{" *element "}"]</sourcecode></li>
          </ul>

          <t>
            The form field type is an IRI.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">form-field-type = IRI</sourcecode></li>
          </ul>

          <t>
            The form field value is either an IRI, a literal value, or null.
          </t>

          <ul empty="true">
            <li><sourcecode type="abnf" markers="false">form-field-value = IRI / literal / null</sourcecode></li>
          </ul>

          <t>
            The nested elements, if any, <bcp14>MUST</bcp14> be processed in a fresh
            environment. Both the current context and current base in this
            environment are initially set to the form field value of the enclosing
            form field. The mapping from identifiers to IRIs is initially set to a
            copy of the mapping from identifiers to IRIs in the current
            environment.
          </t>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section>

      <name>Document Semantics</name>

      <section>

        <name>Submitting Documents</name>

        <t>
          By default, a CoRAL document is a representation that captures the
          current state of a resource. The meaning of a CoRAL document changes
          when it is submitted in a request. Depending on the request method,
          the CoRAL document can capture the intended state of a resource (PUT)
          or be subject to application-specific processing (POST).
        </t>

        <section>

          <name>PUT Requests</name>

          <t>
            A PUT request with a CoRAL document enclosed in the request payload
            requests that the state of the target resource be created or
            replaced with the state described by the CoRAL document.

            A successful PUT of a CoRAL document generally means that a
            subsequent GET on that same target resource would result in an
            equivalent document being sent in a success response.
          </t>

          <t>
            An origin server <bcp14>SHOULD</bcp14> verify that a submitted CoRAL document is
            consistent with any constraints the server has for the target
            resource.

            When a document is inconsistent with the target resource, the origin
            server <bcp14>SHOULD</bcp14> either make it consistent (e.g., by removing
            inconsistent elements) or respond with an appropriate error message
            containing sufficient information to explain why the document is
            unsuitable.
          </t>

          <t>
            The retrieval context and the base URI of a CoRAL document in a PUT
            are the request URI of the request.
          </t>

        </section>

        <section>

          <name>POST Requests</name>

          <t>
            A POST request with a CoRAL document enclosed in the request payload
            requests that the target resource process the CoRAL document
            according to the resource's own specific semantics.
          </t>

          <t>
            The retrieval context of a CoRAL document in a POST is defined by
            the target resource's processing semantics; it may be an unspecified
            URI. The base URI of the document is the request URI of the request.
          </t>

        </section>

      </section>

      <section>

        <name>Returning Documents</name>

        <t>
          In a response, the meaning of a CoRAL document changes depending on
          the request method and the response status code.

          For example, a CoRAL document in a successful response to a GET
          represents the current state of the target resource, whereas a CoRAL
          document in a successful response to a POST might represent either the
          processing result or the new resource state.

          A CoRAL document in an error response represents the error condition,
          usually describing the error state and what next steps are suggested
          for resolving it.
        </t>

        <section>

          <name>Success Responses</name>

          <t>
            Success responses have a response status code that indicates that
            the client's request was successfully received, understood, and
            accepted (2xx in HTTP, 2.xx in CoAP).

            When the representation in a success response does not describe the
            state of the target resource, it describes result of processing the
            request.

            For example, when a request has been fulfilled and has resulted in
            one or more new resources being created, a CoRAL document in the
            response can link to and describe the resource(s) created.
          </t>

          <t>
            The retrieval context and the base URI of a CoRAL document
            representing the current state of a resource are the request URI of
            the request.
          </t>

          <t>
            The retrieval context of a CoRAL document representing a processing
            result is an unspecified URI that refers to the processing result
            itself. The base URI of the document is the request URI of the
            request.
          </t>

        </section>

        <section>

          <name>Redirection Responses</name>

          <t>
            Redirection responses have a response status code that indicates
            that further action needs to be taken by the agent (3xx in HTTP).

            A redirection response, for example, might indicate that the target
            resource is available at a different URI or the server offers a
            choice of multiple matching resources, each with its own specific
            URI.
          </t>

          <t>
            In the latter case, the representation in the response might contain
            a list of resource metadata and URI references (i.e., links) from
            which the agent can choose the most preferred one.
          </t>

          <t>
            The retrieval context of a CoRAL document representing such multiple
            choices in a redirection response is an unspecified URI that refers
            to the redirection itself. The base URI of the document is the
            request URI of the request.
          </t>

        </section>

        <section>

          <name>Error Responses</name>

          <t>
            Error response have a response status code that indicates that
            either the request cannot be fulfilled or the server failed to
            fulfill an apparently valid request (4xx or 5xx in HTTP, 4.xx or
            5.xx in CoAP). A representation in an error response describes the
            error condition.
          </t>

          <t>
            The retrieval context of a CoRAL document representing such an error
            condition is an unspecified URI that refers to the error condition
            itself. The base URI of the document is the request URI of the
            request.
          </t>

        </section>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section>

      <name>Usage Considerations</name>

      <t>
        This section discusses some considerations in creating CoRAL-based
        applications and vocabularies.
      </t>

      <section>

        <name>Specifying CoRAL-based Applications</name>

        <t>
          CoRAL-based applications naturally implement the <xref
          target="W3C.REC-webarch-20041215">Web architecture</xref> and thus are
          centered around orthogonal specifications for identification,
          interaction, and representation:
        </t>

        <ul>
          <li>
            Resources are identified by IRIs or represented by literal values.
          </li>
          <li>
            Interactions are based on the hypermedia interaction model of the
            Web and the methods provided by the Web transfer protocol. The
            semantics of possible interactions are identified by link relation
            types and operation types.
          </li>
          <li>
            Representations are CoRAL documents encoded in the binary format
            defined in <xref target="binary"/> or the textual format defined in
            <xref target="textual"/>. Depending on the application, additional
            representation formats may be used.
          </li>
        </ul>

        <section>

          <name>Application Interfaces</name>

          <t>
            Specifications for CoRAL-based applications need to list the
            specific components used in the application interface and their
            identifiers. This should include the following items:
          </t>

          <ul>
            <li>
              The Web transfer protocols supported.
            </li>
            <li>
              The representation formats used, identified by their Internet
              media types, including the CoRAL serialization formats.
            </li>
            <li>
              The link relation types used.
            </li>
            <li>
              The operation types used. Additionally, for each operation type,
              the permissible request methods.
            </li>
            <li>
              The form field types used. Additionally, for each form field type,
              the permissible form field values.
            </li>
          </ul>

        </section>

        <section>

          <name>Resource Identifiers</name>

          <t>
            <xref target="RFC3986">URIs</xref> are a cornerstone of Web-based
            applications. They enable the uniform identification of resources
            and are used every time a client interacts with a server or a
            resource representation needs to refer to another resource.
          </t>

          <t>
            URIs often include structured application data in the path and query
            components, such as paths in a filesystem or keys in a database. It
            is a common practice in HTTP-based application programming
            interfaces (APIs) to make this part of the application
            specification, i.e., to prescribe fixed URI templates that are
            hard-coded in implementations. However, there are <xref
            target="I-D.nottingham-rfc7320bis">a number of problems with this
            practice</xref>.
          </t>

          <t>
            In CoRAL-based applications, resource names are therefore not part
            of the application specification -- they are an implementation
            detail. The specification of a CoRAL-based application <bcp14>MUST NOT</bcp14>
            mandate any particular form of resource name structure.
          </t>

          <t>
            <xref target="I-D.nottingham-rfc7320bis">BCP 190</xref> describes
            the problematic practice of fixed URI structures in more detail and
            provides some acceptable alternatives.
          </t>

        </section>

        <section>

          <name>Implementation Limits</name>

          <t>
            This document places no restrictions on the number of elements in a
            CoRAL document or the depth of nested elements.

            Applications using CoRAL (in particular those running in constrained
            environments) may limit these numbers and define specific
            implementation limits that an implementation must support at
            least to be interoperable.
          </t>

          <t>
            Applications may also mandate the following and other restrictions:
          </t>

          <ul>
            <li>
              Use of only either the binary format or the text format.
            </li>
            <li>
              Use of only either HTTP or CoAP as the supported Web transfer
              protocol.
            </li>
            <li>
              Use of only dictionary references in the binary format for certain
              vocabulary.
            </li>
            <li>
              Use of URI references and CoRI references only up to a specific
              length.
            </li>
          </ul>

        </section>

      </section>

      <section>

        <name>Minting Vocabulary</name>

        <t>
          New link relation types, operation types, and form field types can be
          minted by defining an <xref target="RFC3987">IRI</xref> that uniquely
          identifies the item.

          Although the IRI may point to a resource that contains a definition of
          the semantics, clients <bcp14>SHOULD NOT</bcp14> automatically access that resource
          to avoid overburdening its server. The IRI <bcp14>SHOULD</bcp14> be under the control
          of the person or party defining it, or be delegated to them.
        </t>

        <t>
          To avoid interoperability problems, it is <bcp14>RECOMMENDED</bcp14> that only IRIs
          are minted that are normalized according to <xref target="RFC3987"
          section="5.3">RFC 3987</xref>. Non-normalized forms that are best
          avoided include:
        </t>

        <ul>
          <li>Uppercase characters in scheme names and domain names</li>
          <li>Percent-encoding of characters where it is not required by the IRI syntax</li>
          <li>Explicitly stated HTTP default port (e.g., &lt;http://example.com/&gt; is preferable over &lt;http://example.com:80/&gt;)</li>
          <li>Completely empty path in HTTP IRIs (e.g., &lt;http://example.com/&gt; is preferable over &lt;http://example.com&gt;)</li>
          <li>Dot segments (<tt>/./</tt> or <tt>/../</tt>) in the path component of an IRI</li>
          <li>Lowercase hexadecimal letters within percent-encoding triplets (e.g., <tt>%3F</tt> is preferable over <tt>%3f</tt>)</li>
          <li>Punycode-encoding of Internationalized Domain Names in IRIs</li>
          <li>IRIs that are not in <xref target="UAX15">Unicode Normalization Form C</xref></li>
        </ul>

        <t>
          IRIs that identify vocabulary do not need to be registered. The
          inclusion of domain names in IRIs allows for the decentralized
          creation of new IRIs without the risk of collisions.
        </t>

        <t>
          However, IRIs can be relatively verbose and impose a high overhead on
          a representation. This can be a problem in <xref
          target="RFC7228">constrained environments</xref>.

          Therefore, CoRAL alternatively allows the use of unsigned integers to
          reference CBOR data items from a dictionary, as specified in <xref
          target="dictionaries"/>. These impose a much smaller overhead but
          instead need to be assigned by an authority to avoid collisions.
        </t>

      </section>

      <section>

        <name>Expressing Registered Link Relation Types</name>

        <t>
          Link relation types registered in the <xref target="LINK-RELATIONS">Link Relations Registry</xref>,
          such as <tt>collection</tt> <xref target="RFC6573"/> or <tt>icon</tt>
          <xref target="W3C.REC-html52-20171214"/>, can be used in CoRAL
          by appending the registered name to the IRI
          &lt;http://www.iana.org/assignments/relation/&gt;:
        </t>

        <ul empty="true">
          <li>
<sourcecode type="coral" markers="false">
<xi:include href="./textual/examples/registered-relation-types.coral" parse="text"/>
</sourcecode>
          </li>
        </ul>

        <t>
          The convention of appending the relation type name to the prefix
          &lt;http://www.iana.org/assignments/relation/&gt; to form IRIs is adopted
          from <xref target="RFC4287">Atom</xref>; see also <xref
          target="RFC8288" section="A.2">RFC 8288</xref>.
        </t>

        <t>
          Note that registered relation type names are required to be lowercase
          ASCII letters (<xref target="RFC8288" section="3.3">RFC 8288</xref>).
        </t>

      </section>

      <section>

        <name>Expressing Simple RDF Statements</name>

        <t>
          An <xref target="W3C.REC-rdf11-concepts-20140225">RDF statement</xref>
          says that some relationship, indicated by a predicate, holds between
          two resources. Existing RDF vocabularies can therefore be a good source
          for link relation types that describe resource metadata.

          For example, a CoRAL document could use the <xref target="FOAF">FOAF
          vocabulary</xref> to describe the person or software that made it:
        </t>

        <ul empty="true">
          <li>
<sourcecode type="coral" markers="false">
<xi:include href="./textual/examples/simple-rdf-statements.coral" parse="text"/>
</sourcecode>
          </li>
        </ul>

      </section>

      <section>

        <name>Expressing Natural Language Texts</name>

        <t>
          Text strings can be associated with a
          <xref target="RFC5646">language tag</xref> and a base text direction
          (right-to-left or left-to-right) by nesting links of types
          &lt;http://coreapps.org/base#language&gt; and
          &lt;http://coreapps.org/base#direction&gt;,
          respectively:
        </t>

        <ul empty="true">
          <li>
<sourcecode type="coral" markers="false">
<xi:include href="./textual/examples/natural-language-texts.coral" parse="text"/>
</sourcecode>
          </li>
        </ul>

        <t>
          The link relation types &lt;http://coreapps.org/base#language&gt; and
          &lt;http://coreapps.org/base#direction&gt; are defined in <xref
          target="core-vocabulary"/>.
        </t>

      </section>

      <section>

        <name>Embedding Representations in CoRAL</name>

        <t>
          When a document links to many Web resources and an agent needs a
          representation of each of them, it can be inefficient to retrieve each
          representations individually. To minimize round-trips, documents can
          embed representations of resources.
        </t>

        <t>
          A representation can be embedded in a document by including a link of
          type &lt;http://coreapps.org/base#representation&gt;:
        </t>

        <ul empty="true">
          <li>
<sourcecode type="coral" markers="false">
<xi:include href="./textual/examples/embedded-representations.coral" parse="text"/>
</sourcecode>
          </li>
        </ul>

        <t>
          An embedded representation <bcp14>SHOULD</bcp14> have a nested link of type
          &lt;http://coreapps.org/http#type&gt; or
          &lt;http://coreapps.org/coap#type&gt; that indicates the content type
          of the representation.
        </t>

        <t>
          The link relation types
          &lt;http://coreapps.org/base#representation&gt;,
          &lt;http://coreapps.org/http#type&gt;, and
          &lt;http://coreapps.org/coap#type&gt; are defined in <xref
          target="core-vocabulary"/>.
        </t>

      </section>

      <section>

        <name>Embedding CoRAL in CBOR Representations</name>

        <t>
          Data items in the CoRAL binary format (<xref target="binary"/>) may be
          embedded in other <xref target="I-D.ietf-cbor-7049bis">CBOR
          structures</xref>.

          Specifications using <xref target="RFC8610">CDDL</xref> should reference
          the following CDDL definitions for this purpose:
        </t>

        <ul empty="true">
          <li>
<sourcecode type="cddl" markers="false">
CoRAL-Document = document
CoRAL-Link = link
CoRAL-Form = form
</sourcecode>
          </li>
        </ul>

        <t>
          For each embedded document, link, and form, the specification for the
          embedding CBOR structure needs to specify the document retrieval
          context, the link context, and the form context, respectively.
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="security">

      <name>Security Considerations</name>

      <t>
        CoRAL document processors need to be fully prepared for all types of
        hostile input that may be designed to corrupt, overrun, or achieve
        control of the agent processing the document. For example, hostile input
        may be constructed to overrun buffers, allocate very big data
        structures, or exhaust the stack depth by setting up deeply nested
        elements. Processors need to have appropriate resource management to
        mitigate these attacks.
      </t>

      <t>
        CoRAL serialization formats intentionally do not feature the equivalent
        of XML entity references so as to preclude the entire class of attacks
        relating to them, such as exponential XML entity expansion ("billion
        laughs") <xref target="CAPEC-197"/> and malicious XML entity linking
        <xref target="CAPEC-201"/>.
      </t>

      <t>
        Implementers of the CoRAL binary format need to consider the security
        aspects of decoding CBOR. See <xref target="I-D.ietf-cbor-7049bis"
        section="10">RFC 7049bis</xref> for security considerations relating to
        CBOR. In particular, different number encodings for the same numeric
        value are not equivalent in CoRAL (e.g., a floating-point value of 0.0
        is not the same as the integer 0).
      </t>

      <t>
        Implementers of the CoRAL textual format need to consider the security
        aspects of handling Unicode input. See <xref target="UTR36">Unicode
        Technical Report #36</xref> for security considerations relating to
        visual spoofing and misuse of character encodings. See <xref
        target="RFC3629" section="10">RFC 3629</xref> for security
        considerations relating to UTF-8. See <xref target="UTS39">Unicode
        Technical Standard #39</xref> for security mechanisms that can be used
        to detect possible security problems relating to Unicode.
      </t>

      <t>
        CoRAL makes extensive use of resource identifiers. See <xref
        target="RFC3986" section="7">RFC 3986</xref> for security considerations
        relating to URIs. See <xref target="RFC3987" section="8">RFC 3987</xref>
        for security considerations relating to IRIs. See Section XX of <xref
        target="I-D.ietf-core-href">RFC XXXX</xref> for security considerations
        relating to CoRIs.
      </t>

      <t>
        The security of applications using CoRAL can depend on the proper
        preparation and comparison of internationalized strings. For example,
        such strings can be used to make authentication and authorization
        decisions, and the security of an application could be compromised if an
        entity providing a given string is connected to the wrong account or
        online resource based on different interpretations of the string. See
        <xref target="RFC6943">RFC 6943</xref> for security considerations
        relating to identifiers in IRIs and other strings.
      </t>

      <t>
        CoRAL is intended to be used in conjunction with a Web transfer protocol
        like HTTP or CoAP. See <xref target="RFC7230" section="9">RFC
        7230</xref>, <xref target="RFC7231" section="9">RFC 7231</xref>, etc.,
        for security considerations relating to HTTP. See <xref target="RFC7252"
        section="11">RFC 7252</xref> for security considerations relating to
        CoAP.
      </t>

      <t>
        CoRAL does not define any specific mechanisms for protecting the
        confidentiality and integrity of CoRAL documents. It relies on security
        mechanisms on the application layer or transport layer for this, such as
        <xref target="RFC8446">Transport Layer Security (TLS)</xref>.
      </t>

      <t>
        CoRAL documents and the structure of a web of resources revealed from
        automatically following links can disclose personal information and
        other sensitive information. Implementations need to prevent the
        unintentional disclosure of such information. See <xref target="RFC7231"
        section="9">RFC 7231</xref> for additional considerations.
      </t>

      <t>
        Applications using CoRAL ought to consider the attack vectors opened by
        automatically following, trusting, or otherwise using links and forms in
        CoRAL documents. See <xref target="RFC8288" section="5">RFC 8288</xref>
        for related considerations.
      </t>

      <t>
        In particular, when a CoRAL document is the representation of a
        resource, the server that is authoritative for that resource may not
        necessarily be authoritative for nested elements in the document. In
        this case, unless an application defines specific rules, any link or
        form where the link/form context and the document's retrieval context do
        not share the same <xref target="RFC6454">Web Origin</xref> should be
        discarded ("same-origin policy").
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section>

      <name>IANA Considerations</name>

      <section>

        <name>Media Type "application/coral+cbor"</name>

        <t>
          This document registers the media type <tt>application/coral+cbor</tt>
          according to the procedures of <xref target="RFC6838">BCP 13</xref>.
        </t>

        <dl newline="true">
          <dt>Type name:</dt>
          <dd>application</dd>
          <dt>Subtype name:</dt>
          <dd>coral+cbor</dd>
          <dt>Required parameters:</dt>
          <dd>N/A</dd>
          <dt>Optional parameters:</dt>
          <dd>dictionary - See <xref target="dictionaries"/> of [I-D.ietf-core-coral].</dd>
          <dt>Encoding considerations:</dt>
          <dd>binary - See <xref target="binary"/> of [I-D.ietf-core-coral].</dd>
          <dt>Security considerations:</dt>
          <dd>See <xref target="security"/> of [I-D.ietf-core-coral].</dd>
          <dt>Interoperability considerations:</dt>
          <dd>N/A</dd>
          <dt>Published specification:</dt>
          <dd>[I-D.ietf-core-coral]</dd>
          <dt>Applications that use this media type:</dt>
          <dd>See <xref target="introduction"/> of [I-D.ietf-core-coral].</dd>
          <dt>Fragment identifier considerations:</dt>
          <dd>As specified for <tt>application/cbor</tt>.</dd>
          <dt>Additional information:</dt>
          <dd>
            <t>Deprecated alias names for this type: N/A</t>
            <t>Magic number(s): N/A</t>
            <t>File extension(s): .coral.cbor</t>
            <t>Macintosh file type code(s): N/A</t>
          </dd>
          <dt>Person &amp; email address to contact for further information:</dt>
          <dd>See the Author's Address section of [I-D.ietf-core-coral].</dd>
          <dt>Intended usage:</dt>
          <dd>COMMON</dd>
          <dt>Restrictions on usage:</dt>
          <dd>N/A</dd>
          <dt>Author:</dt>
          <dd>See the Author's Address section of [I-D.ietf-core-coral].</dd>
          <dt>Change controller:</dt>
          <dd>IESG</dd>
          <dt>Provisional registration?</dt>
          <dd>No</dd>
        </dl>
      </section>

      <section>

        <name>Media Type "text/coral"</name>

        <t>
          This document registers the media type <tt>text/coral</tt> according to the
          procedures of <xref target="RFC6838">BCP 13</xref> and guidelines of
          <xref target="RFC6657">RFC 6657</xref>.
        </t>

        <dl newline="true">
          <dt>Type name:</dt>
          <dd>text</dd>
          <dt>Subtype name:</dt>
          <dd>coral</dd>
          <dt>Required parameters:</dt>
          <dd>N/A</dd>
          <dt>Optional parameters:</dt>
          <dd>N/A</dd>
          <dt>Encoding considerations:</dt>
          <dd>binary - See <xref target="textual"/> of [I-D.ietf-core-coral].</dd>
          <dt>Security considerations:</dt>
          <dd>See <xref target="security"/> of [I-D.ietf-core-coral].</dd>
          <dt>Interoperability considerations:</dt>
          <dd>N/A</dd>
          <dt>Published specification:</dt>
          <dd>[I-D.ietf-core-coral]</dd>
          <dt>Applications that use this media type:</dt>
          <dd>See <xref target="introduction"/> of [I-D.ietf-core-coral].</dd>
          <dt>Fragment identifier considerations:</dt>
          <dd>N/A</dd>
          <dt>Additional information:</dt>
          <dd>
            <t>Deprecated alias names for this type: N/A</t>
            <t>Magic number(s): N/A</t>
            <t>File extension(s): .coral</t>
            <t>Macintosh file type code(s): N/A</t>
          </dd>
          <dt>Person &amp; email address to contact for further information:</dt>
          <dd>See the Author's Address section of [I-D.ietf-core-coral].</dd>
          <dt>Intended usage:</dt>
          <dd>COMMON</dd>
          <dt>Restrictions on usage:</dt>
          <dd>N/A</dd>
          <dt>Author:</dt>
          <dd>See the Author's Address section of [I-D.ietf-core-coral].</dd>
          <dt>Change controller:</dt>
          <dd>IESG</dd>
          <dt>Provisional registration?</dt>
          <dd>No</dd>
        </dl>

      </section>

      <section>

        <name>CoAP Content Formats</name>

        <t>
          This document registers CoAP content formats for the content types
          <tt>application/coral+cbor</tt> and <tt>text/coral</tt> according to the procedures
          of <xref target="RFC7252">RFC 7252</xref>.
        </t>

        <ul>
          <li>
            <dl spacing="compact">
              <dt>Content Type:</dt>
              <dd>application/coral+cbor</dd>
              <dt>Content Coding:</dt>
              <dd>identity</dd>
              <dt>ID:</dt>
              <dd>TBD3</dd>
              <dt>Reference:</dt>
              <dd>[I-D.ietf-core-coral]</dd>
            </dl>
          </li>
          <li>
            <dl spacing="compact">
              <dt>Content Type:</dt>
              <dd>text/coral</dd>
              <dt>Content Coding:</dt>
              <dd>identity</dd>
              <dt>ID:</dt>
              <dd>TBD4</dd>
              <dt>Reference:</dt>
              <dd>[I-D.ietf-core-coral]</dd>
            </dl>
          </li>
        </ul>

        <t>
          [[NOTE TO RFC EDITOR: Please replace all occurrences of TBD3 and
          TBD4 in this document with the code points assigned by IANA.]]
        </t>

        <t>
          [[NOTE TO IMPLEMENTERS: Experimental implementations may use content
          format ID 65087 for <tt>application/coral+cbor</tt> and content format ID
          65343 for <tt>text/coral</tt> until IANA has assigned code points.]]
        </t>

      </section>

      <section>

        <name>CBOR Tag</name>

        <t>
          This document registers a CBOR tag for dictionary references according
          to the procedures of <xref target="I-D.ietf-cbor-7049bis">RFC
          7049bis</xref>.
        </t>

        <ul>
          <li>
            <dl spacing="compact">
              <dt>Tag:</dt>
              <dd>TBD6</dd>
              <dt>Data Item:</dt>
              <dd>unsigned integer</dd>
              <dt>Semantics:</dt>
              <dd>Dictionary reference</dd>
              <dt>Reference:</dt>
              <dd>[I-D.ietf-core-coral]</dd>
            </dl>
          </li>
        </ul>

        <t>
          [[NOTE TO RFC EDITOR: Please replace all occurrences of TBD6 in this
          document with the code point assigned by IANA.]]
        </t>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </middle>

  <back>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <displayreference target="I-D.ietf-cbor-7049bis" to="RFC7049bis"/>
    <displayreference target="I-D.kelly-json-hal" to="HAL"/>
    <displayreference target="I-D.nottingham-rfc7320bis" to="RFC7320bis"/>

    <references>

      <name>References</name>

      <references>

        <name>Normative References</name>

        <reference anchor="I-D.ietf-core-href">
          <front>
            <title>Constrained Resource Identifiers</title>
            <author initials="K." surname="Hartke" fullname="Klaus Hartke"/>
            <date month="January" day="8" year="2020" />
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-core-href-02" />
          <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-core-href-02.txt" />
        </reference>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3339.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3987.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5646.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6454.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6657.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6838.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8610.xml"/>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-cbor-7049bis.xml"/>

        <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
          <front>
            <title>The Unicode Standard</title>
            <author>
              <organization>The Unicode Consortium</organization>
            </author>
          </front>
          <annotation>
          Note that this reference is to the latest version of Unicode, rather
          than to a specific release. It is not expected that future changes in
          the Unicode specification will have any impact on this document.
          </annotation>
        </reference>

        <reference anchor="UAX15" target="http://unicode.org/reports/tr15/">
          <front>
            <title>Unicode Standard Annex #15: Unicode Normalization Forms</title>
            <author>
              <organization>The Unicode Consortium</organization>
            </author>
          </front>
        </reference>

        <reference anchor="UAX31" target="http://unicode.org/reports/tr31/">
          <front>
            <title>Unicode Standard Annex #31: Unicode Identifier and Pattern Syntax</title>
            <author>
              <organization>The Unicode Consortium</organization>
            </author>
          </front>
        </reference>

      </references>

      <references>

        <name>Informative References</name>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4287.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5789.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6573.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6690.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6943.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7228.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7252.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8132.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8288.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.kelly-json-hal.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.nottingham-rfc7320bis.xml"/>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html52-20171214.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-rdf11-concepts-20140225.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-rdf-schema-20140225.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-turtle-20140225.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-webarch-20041215.xml"/>

        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml8/reference.IANA.core-parameters.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml8/reference.IANA.http-methods.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml8/reference.IANA.link-relations.xml"/>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml8/reference.IANA.media-types.xml"/>

        <reference anchor="UTR36" target="http://unicode.org/reports/tr36/">
          <front>
            <title>Unicode Technical Report #36: Unicode Security Considerations</title>
            <author>
              <organization>The Unicode Consortium</organization>
            </author>
          </front>
        </reference>

        <reference anchor="UTS39" target="http://unicode.org/reports/tr39/">
          <front>
            <title>Unicode Technical Standard #39: Unicode Security Mechanisms</title>
            <author>
              <organization>The Unicode Consortium</organization>
            </author>
          </front>
        </reference>

        <reference anchor="FOAF" target="http://xmlns.com/foaf/spec/20140114.html">
          <front>
            <title>FOAF Vocabulary Specification 0.99</title>
            <author initials="D." surname="Brickley" fullname="Dan Brickley"/>
            <author initials="L." surname="Miller" fullname="Libby Miller"/>
            <date month="January" day="14" year="2014"/>
          </front>
        </reference>

        <reference anchor="CAPEC-197" target="https://capec.mitre.org/data/definitions/197.html">
          <front>
            <title>CAPEC-197: XML Entity Expansion</title>
            <author fullname="MITRE"/>
            <date month="September" day="30" year="2019"/>
          </front>
        </reference>

        <reference anchor="CAPEC-201" target="https://capec.mitre.org/data/definitions/201.html">
          <front>
            <title>CAPEC-201: XML Entity Linking</title>
            <author fullname="MITRE"/>
            <date month="September" day="30" year="2019"/>
          </front>
        </reference>

      </references>

    </references>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="core-vocabulary">

      <name>Core Vocabulary</name>

      <t>
        This section defines the core vocabulary for CoRAL: a set of link
        relation types, operation types, and form field types.
      </t>

      <section>

        <name>Base</name>

        <t>
          Link Relation Types:
        </t>

        <dl newline="true">
          <dt>&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;</dt>
          <dd>
            <t>
              Indicates that the link's context is an instance of the class
              specified as the link's target, as defined by <xref
              target="W3C.REC-rdf-schema-20140225">RDF Schema</xref>.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/base#title&gt;</dt>
          <dd>
            <t>
              Indicates that the link target is a human-readable label (e.g., a
              menu entry).
            </t>
            <t>
              The link target <bcp14>MUST</bcp14> be a text string. The text string <bcp14>SHOULD</bcp14> be
              annotated with a language and text direction using nested links of
              type &lt;http://coreapps.org/base#language&gt; and
              &lt;http://coreapps.org/base#direction&gt;, respectively.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/base#language&gt;</dt>
          <dd>
            <t>
              Indicates that the link target is a <xref
              target="RFC5646">language tag</xref> that specifies the language
              of the link context.
            </t>
            <t>
              The link target <bcp14>MUST</bcp14> be a text string in the format specified in
              <xref target="RFC5646" section="2.1">RFC 5646</xref>.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/base#direction&gt;</dt>
          <dd>
            <t>
              Indicates that the link target is a base text direction
              (right-to-left or left-to-right) that specifies the text
              directionality of the link context.
            </t>
            <t>
              The link target <bcp14>MUST</bcp14> be either the text string "rtl" or the text
              string "ltr".
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/base#representation&gt;</dt>
          <dd>
            <t>
              Indicates that the link target is a representation of the link
              context.
            </t>
            <t>
              The link target <bcp14>MUST</bcp14> be a byte string.
            </t>
            <t>
              The representation may be a full, partial, or inconsistent version
              of the representation served from the URI of the resource.
            </t>
            <t>
              A link with this link relation type can occur as a top-level element in
              a document or as a nested element within a link. When it occurs as
              a top-level element, it provides an alternate representation of
              the document's retrieval context. When it occurs nested within a
              link, it provides a representation of link target of the enclosing
              link.
            </t>
          </dd>
        </dl>

        <t>
          Operation Types:
        </t>

        <dl newline="true">
          <dt>&lt;http://coreapps.org/base#update&gt;</dt>
          <dd>
            <t>
              Indicates that the state of the form's context can be replaced
              with the state described by a representation submitted to the
              server.
            </t>
            <t>
              This operation type defaults to the PUT method <xref
              target="RFC7231"/> <xref target="RFC7252"/> for both HTTP and
              CoAP.

              Typical overrides by a form field include the PATCH method <xref
              target="RFC5789"/> <xref target="RFC8132"/> for HTTP and CoAP and
              the iPATCH method <xref target="RFC8132"/> for CoAP.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/base#search&gt;</dt>
          <dd>
            <t>
              Indicates that the form's context can be searched by submitting a
              search query.
            </t>
            <t>
              This operation type defaults to the POST method <xref
              target="RFC7231"/> for HTTP and the FETCH method <xref
              target="RFC8132"/> for CoAP.

              Typical overrides by a form field include the POST method <xref
              target="RFC7252"/> for CoAP.
            </t>
          </dd>
        </dl>

      </section>

      <section>

        <name>Collections</name>

        <t>
          Link Relation Types:
        </t>

        <dl newline="true">
          <dt>&lt;http://www.iana.org/assignments/relation/item&gt;</dt>
          <dd>
            <t>
              Indicates that the link's context is a collection and that the
              link's target is a member of that collection, as defined in
              <xref target="RFC6573" section="2.1">RFC 6573</xref>.
            </t>
          </dd>
          <dt>&lt;http://www.iana.org/assignments/relation/collection&gt;</dt>
          <dd>
            <t>
              Indicates that the link's target is a collection and that the
              link's context is a member of that collection, as defined in
              <xref target="RFC6573" section="2.2">RFC 6573</xref>.
            </t>
          </dd>
        </dl>

        <t>
          Operation Types:
        </t>

        <dl newline="true">
          <dt>&lt;http://coreapps.org/collections#create&gt;</dt>
          <dd>
            <t>
              Indicates that the form's context is a collection and that a new
              item can be created in that collection with the state defined by a
              representation submitted to the server.
            </t>
            <t>
              This operation type defaults to the POST method <xref
              target="RFC7231"/> <xref target="RFC7252"/> for both HTTP and
              CoAP.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/collections#delete&gt;</dt>
          <dd>
            <t>
              Indicates that the form's context is a member of a collection and
              that the form's context can be removed from that collection.
            </t>
            <t>
              This operation type defaults to the DELETE method <xref
              target="RFC7231"/> <xref target="RFC7252"/> for both HTTP and
              CoAP.
            </t>
          </dd>
        </dl>

      </section>

      <section>

        <name>HTTP</name>

        <t>
          Form Field Types:
        </t>

        <dl newline="true">
          <dt>&lt;http://coreapps.org/http#method&gt;</dt>
          <dd>
            <t>
              Specifies the HTTP method for the request.
            </t>
            <t>
              The form field value <bcp14>MUST</bcp14> be a text string in the format defined
              in <xref target="RFC7231" section="4.1">RFC 7231</xref>. The
              possible set of values is maintained in the <xref target="HTTP-METHODS">HTTP Methods Registry</xref>.
            </t>
            <t>
              A form field of this type <bcp14>MUST NOT</bcp14> occur more than once in a form.
              If absent, it defaults to the request method implied by the form's
              operation type.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/http#accept&gt;</dt>
          <dd>
            <t>
              Specifies an acceptable HTTP content type for the request payload.
              There may be multiple form fields of this type. If a form does not
              include a form field of this type, the server accepts any or no
              request payload, depending on the operation type.
            </t>
            <t>
              The form field value <bcp14>MUST</bcp14> be a text string in the format defined
              in <xref target="RFC7231" section="3.1.1.1">RFC 7231</xref>. The
              possible set of media types and their parameters is maintained in
              the <xref target="MEDIA-TYPES">Media Types Registry</xref>.
            </t>
          </dd>
        </dl>

        <t>
          Link Relation Types:
        </t>

        <dl newline="true">
          <dt>&lt;http://coreapps.org/http#type&gt;</dt>
          <dd>
            <t>
              Specifies the HTTP content type of the link context.
            </t>
            <t>
              The link target <bcp14>MUST</bcp14> be a text string in the format defined in
              <xref target="RFC7231" section="3.1.1.1">RFC 7231</xref>. The
              possible set of media types and their parameters is maintained in
              the <xref target="MEDIA-TYPES">Media Types Registry</xref>.
            </t>
          </dd>
        </dl>

      </section>

      <section>

        <name>CoAP</name>

        <t>
          Form Field Types:
        </t>

        <dl newline="true" spacing="normal">
          <dt>&lt;http://coreapps.org/coap#method&gt;</dt>
          <dd>
            <t>
              Specifies the CoAP method for the request.
            </t>
            <t>
              The form field value <bcp14>MUST</bcp14> be an integer identifying a CoAP method
              (e.g., the integer 2 for the POST method). The possible set of
              values is maintained in the <xref target="CORE-PARAMETERS">CoAP Method Codes Registry</xref>.
            </t>
            <t>
              A form field of this type <bcp14>MUST NOT</bcp14> occur more than once in a form.
              If absent, it defaults to the request method implied by the form's
              operation type.
            </t>
          </dd>
          <dt>&lt;http://coreapps.org/coap#accept&gt;</dt>
          <dd>
            <t>
              Specifies an acceptable CoAP content format for the request
              payload. There may be multiple form fields of this type. If a form
              does not include a form field of this type, the server accepts any
              or no request payload, depending on the operation type.
            </t>
            <t>
              The form field value <bcp14>MUST</bcp14> be an integer identifying a CoAP content
              format. The possible set of values is maintained in the CoAP
              <xref target="CORE-PARAMETERS">Content Formats Registry</xref>.
            </t>
          </dd>
        </dl>

        <t>
          Link Relation Types:
        </t>

        <dl newline="true" spacing="normal">
          <dt>&lt;http://coreapps.org/coap#type&gt;</dt>
          <dd>
            <t>
              Specifies the CoAP content format of the link context.
            </t>
            <t>
              The link target <bcp14>MUST</bcp14> be an integer identifying a CoAP content
              format (e.g., the integer 42 for the content type
              <tt>application/octet-stream</tt> without a content coding). The possible
              set of values is maintained in the <xref target="CORE-PARAMETERS">CoAP Content Formats Registry</xref>.
            </t>
          </dd>
        </dl>

      </section>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section anchor="default-dictionary">

      <name>Default Dictionary</name>

      <t>
        This section defines a default dictionary that is assumed when the
        <tt>application/coral+cbor</tt> media type is used without a <tt>dictionary</tt>
        parameter.
      </t>

      <table anchor="dict" align="center">
        <name>Default Dictionary</name>
        <thead>
          <tr>
            <th align="right">Key</th>
            <th align="left">Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="right">0</td>
            <td align="left">&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt;</td>
          </tr>
          <tr>
            <td align="right">1</td>
            <td align="left">&lt;http://www.iana.org/assignments/relation/item&gt;</td>
          </tr>
          <tr>
            <td align="right">2</td>
            <td align="left">&lt;http://www.iana.org/assignments/relation/collection&gt;</td>
          </tr>
          <tr>
            <td align="right">3</td>
            <td align="left">&lt;http://coreapps.org/collections#create&gt;</td>
          </tr>
          <tr>
            <td align="right">4</td>
            <td align="left">&lt;http://coreapps.org/base#update&gt;</td>
          </tr>
          <tr>
            <td align="right">5</td>
            <td align="left">&lt;http://coreapps.org/collections#delete&gt;</td>
          </tr>
          <tr>
            <td align="right">6</td>
            <td align="left">&lt;http://coreapps.org/base#search&gt;</td>
          </tr>
          <tr>
            <td align="right">7</td>
            <td align="left">&lt;http://coreapps.org/coap#accept&gt;</td>
          </tr>
          <tr>
            <td align="right">8</td>
            <td align="left">&lt;http://coreapps.org/coap#type&gt;</td>
          </tr>
          <tr>
            <td align="right">9</td>
            <td align="left">&lt;http://coreapps.org/base#language&gt;</td>
          </tr>
          <tr>
            <td align="right">10</td>
            <td align="left">&lt;http://coreapps.org/coap#method&gt;</td>
          </tr>
          <tr>
            <td align="right">11</td>
            <td align="left">&lt;http://coreapps.org/base#direction&gt;</td>
          </tr>
          <tr>
            <td align="right">12</td>
            <td align="left">"ltr"</td>
          </tr>
          <tr>
            <td align="right">13</td>
            <td align="left">"rtl"</td>
          </tr>
          <tr>
            <td align="right">14</td>
            <td align="left">&lt;http://coreapps.org/base#representation&gt;</td>
          </tr>
        </tbody>
      </table>
    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section removeInRFC="true">

      <name>Change Log</name>

      <t>
        Changes from -02 to -03:
      </t>

      <ul>
        <li>Minor editorial improvements.</li>
      </ul>

      <t>
        Changes from -01 to -02:
      </t>

      <ul>
        <li>Added nested elements to form fields.</li>
        <li>Replaced the special construct for embedded representations with links.</li>
        <li>Changed the textual format to allow simple/qualified names wherever IRI references are allowed.</li>
        <li>Introduced predefined names in the textual format (#39).</li>
        <li>Minor editorial improvements and bug fixes.</li>
      </ul>

      <t>
        Changes from -00 to -01:
      </t>

      <ul>
        <li>Added a section on the semantics of CoRAL documents in responses.</li>
        <li>Minor editorial improvements.</li>
      </ul>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

    <section numbered="false">

      <name>Acknowledgements</name>

      <t>
        CoRAL is heavily inspired by Mike Kelly's <xref
        target="I-D.kelly-json-hal">JSON Hypertext Application Language</xref>.
      </t>

      <t>
        The recommendations for minting IRIs have been adopted from <xref
        target="W3C.REC-rdf11-concepts-20140225">RDF 1.1 Concepts and Abstract
        Syntax</xref> to ease the interoperability between RDF predicates and
        link relation types.
      </t>

      <!-- sorted by last name -->
      <t>
        Thanks to
        Christian Amsüss,
        Carsten Bormann,
        Thomas Fossati,
        Jaime Jiménez,
        Jim Schaad,
        Sebastian Käbisch,
        Ari Keranen,
        Michael Koster,
        Matthias Kovatsch, and
        Niklas Widell
        for helpful comments and discussions that have shaped the document.
      </t>

    </section>

    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->
    <!-- **************************************************************** -->

  </back>

</rfc>
